{
  "LoopLinkProject": {
    "commonMain": {
      "App.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/App.kt",
        "description": "This file serves as the main entry point for the application's user interface. It is responsible for setting up the overall theme, providing essential dependencies to the rest of the app via `CompositionLocalProvider`, and determining the initial screen to display. If the local database is empty, it directs the user to the login screen; otherwise, it displays the main application screen.",
        "expectedDeclarations": [
          {
            "type": "class",
            "name": "MainViewModel",
            "description": "An expected class that requires platform-specific implementations. It is expected to have `startP2PServices()` and `stopP2PServices()` methods."
          }
        ],
        "functions": [
          {
            "signature": "App(onLoginSuccess: () -> Unit)",
            "description": "This is the main composable function that builds the root of the UI.",
            "parameters": [
              {
                "name": "onLoginSuccess",
                "type": "() -> Unit",
                "description": "A callback function to be executed after a successful login."
              }
            ],
            "functionality": [
              "Initializes the `Ktor` client for network operations.",
              "Wraps the UI in `CompositionLocalProvider` to make `database`, `cuimsAPI`, and `peerDiscoveryViewModel` available throughout the component tree.",
              "Applies the custom `AppTheme`.",
              "Conditionally displays the `LoginFields` screen if no user data is found in the database (`database.getSize() == 0`), otherwise, it shows the `MainScreen`."
            ]
          }
        ]
      },
      "Greeting.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/Greeting.kt",
        "description": "A simple class used for demonstration or testing purposes. It provides a greeting message that includes the name of the current platform.",
        "classes": [
          {
            "name": "Greeting",
            "properties": [
              {
                "name": "platform",
                "type": "Platform",
                "description": "An instance of the `Platform` interface, which provides the platform-specific name."
              }
            ],
            "functions": [
              {
                "signature": "greet(): String",
                "description": "Returns a greeting string that incorporates the platform's name. For example, \"Hello lets see how this works, Android!\"."
              }
            ]
          }
        ]
      },
      "Platform.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/Platform.kt",
        "description": "This file defines the multiplatform abstractions for LoopLink. It includes expected functions and classes that require platform-specific implementations (in `androidMain` and `jvmMain`). It also contains the `DatabaseMng` class, which handles all interactions with the local SQLite database.",
        "enums": [
          {
            "name": "PlatformType",
            "description": "An enum to distinguish between `ANDROID` and `DESKTOP` platforms."
          }
        ],
        "interfaces": [
          {
            "name": "Platform",
            "description": "An interface that requires a `name` property to identify the platform."
          }
        ],
        "expectedDeclarations": [
          {
            "type": "function",
            "signature": "getPlatformType(): PlatformType",
            "description": "Expected to return the current `PlatformType`."
          },
          {
            "type": "function",
            "signature": "getPlatform(): Platform",
            "description": "Expected to return an implementation of the `Platform` interface."
          },
          {
            "type": "class",
            "name": "DriverFactory",
            "description": "A class with a constructor and a `createDriver()` method that returns a `SqlDriver` for the database."
          }
        ],
        "classes": [
          {
            "name": "DatabaseMng",
            "constructor": "DatabaseMng(driver: SqlDriver)",
            "description": "Manages database operations.",
            "functions": [
              {
                "signature": "insertIntoDatabase(name: String, uid: String)",
                "description": "Inserts the user's name and UID into the database."
              },
              {
                "signature": "insertUserData(...)",
                "description": "Inserts comprehensive user data, including profile details and an optional profile picture."
              },
              {
                "signature": "getProfileImage(): ByteArray",
                "description": "Retrieves the user's profile picture from the database."
              },
              {
                "signature": "getAllFromDatabase(): List<List<String?>>",
                "description": "Fetches all user records and returns them as a list of string lists."
              },
              {
                "signature": "getUserData(): userInfo",
                "description": "Retrieves and returns user data as a `userInfo` object."
              },
              {
                "signature": "deleteUser()",
                "description": "Deletes the user's data from the database."
              },
              {
                "signature": "getSize(): Int",
                "description": "Returns the number of user records in the database."
              }
            ]
          }
        ]
      },
      "ui/theme/Theme.kt": {
        "path": "composeApp/src/commonMain/kotlin/ui/theme/Theme.kt",
        "description": "This file defines the application's main theme, `AppTheme`, utilizing Jetpack Compose's MaterialTheme. It configures the typography and color scheme for the entire application, ensuring a consistent visual style.",
        "composableFunctions": [
          {
            "name": "AppTheme",
            "signature": "AppTheme(content: @Composable () -> Unit)",
            "description": "This composable function sets up the `MaterialTheme` for the application.",
            "parameters": [
              {
                "name": "content",
                "type": "@Composable () -> Unit",
                "description": "The composable content to which the theme will be applied."
              }
            ],
            "functionality": [
              "Defines `AppTypography` by overriding default MaterialTheme typography with `RobotFont`.",
              "Applies `AppTypography` and `Colors.DarkColorScheme` to the `MaterialTheme`."
            ]
          }
        ]
      },
      "ui/AvailableServicesScreen.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/ui/AvailableServicesScreen.kt",
        "description": "This file contains the UI for displaying a list of available services on the network. It allows the user to scan for devices and connect to a selected service.",
        "classes": [
          {
            "name": "AvailableServicesScreen",
            "description": "A `Screen` that displays a list of discovered services. It uses the `PeerDiscoveryViewModel` to manage the discovery process and connect to services.",
            "properties": [
              {
                "name": "viewModel",
                "type": "PeerDiscoveryViewModel",
                "description": "The ViewModel that manages peer discovery."
              }
            ],
            "composableFunctions": [
              {
                "signature": "Content()",
                "description": "The main composable function for the `AvailableServicesScreen`. It displays a list of discovered services and provides a button to start or stop the discovery process.",
                "functionality": [
                  "Observes the `discoveredServices` and `isDiscovering` state from the `PeerDiscoveryViewModel`.",
                  "Displays a list of `ServiceListItem` composables for each discovered service.",
                  "Provides a floating action button to start or stop the scanning process.",
                  "Handles the connection to a service by calling `viewModel.connectToService(service)` when a list item is clicked."
                ]
              }
            ]
          }
        ],
        "composableFunctions": [
          {
            "signature": "ServiceListItem(serviceInfo: ServiceInfo, onConnectClick: () -> Unit)",
            "description": "A composable that displays information about a single discovered service and provides a button to connect to it."
          }
        ]
      },
      "ui/MainScreen.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/ui/MainScreen.kt",
        "description": "This file is responsible for rendering the primary user interface that users see after logging in. Its key responsibility is to provide a responsive layout that adapts to different screen sizes, specifically distinguishing between a wide-screen (desktop) and a narrow-screen (mobile) experience. It acts as a central hub, orchestrating the display of the chat list (sidebar) and the chat content area. It leverages the `ViewModel` to manage the list of chat rooms and uses the `Voyager` navigation library to handle all navigation logic, including the dual-pane layout on desktop and the screen-stacking navigation on mobile.",
        "dataClassesAndObjects": [
          {
            "type": "Data Class",
            "name": "TopTab(id: String, label: String)",
            "description": "A simple data class, currently unused, likely intended for a tab-based UI structure."
          },
          {
            "type": "Object",
            "name": "MainScreen : Screen",
            "description": "This is the main entry point for this UI, defined as a `Screen` from the Voyager library. It represents a destination in the navigation graph."
          },
          {
            "type": "Object",
            "name": "EmptyChatTab : Tab",
            "description": "A Voyager `Tab` object that represents the default state in the desktop layout when no chat is selected. It simply displays the `EmptyChatPlaceholder` composable."
          },
          {
            "type": "Data Class",
            "name": "ChatTab(val room: RoomItem) : Tab",
            "description": "A Voyager `Tab` used in the desktop layout. Each instance represents a specific chat room. When this tab is active, its `Content` (the `ChatAppWithScaffold`) is displayed in the main content area."
          },
          {
            "type": "Class",
            "name": "ChatTabScreen(val room: RoomItem) : Screen",
            "description": "A Voyager `Screen` used for mobile navigation. When a user taps a chat room, the app navigates to this screen, pushing it onto the navigation stack and displaying the chat UI full-screen."
          }
        ],
        "composableFunctions": [
          {
            "signature": "MainScreen.Content()",
            "description": "The primary composable function that builds the screen's UI. Its logic is centered around adapting the layout based on the platform.",
            "functionality": {
              "viewModelIntegration": "It obtains an instance of `ChatViewModel` to access and manage the list of chat rooms. It also pre-populates the list with a \"Self\" chat room and defines a lambda (`addRoom`) for adding new rooms.",
              "responsiveLayout": "It calls `getPlatformType()` to determine if it's running on a `DESKTOP` or `ANDROID` platform.",
              "desktopLayout": "It sets up a `Row` to create a two-pane layout. It initializes a `TabNavigator` (from Voyager) which manages the content of the main (right) pane. The `EmptyChatTab` is set as the default. It places the `InitiateSideBar` in the left pane, occupying 15% of the width. It places the `CurrentTab()` composable in the right pane, which dynamically displays the content of the currently selected Voyager `Tab`. It uses `CompositionLocalProvider` to make the `tabNavigator` available to child composables, allowing the sidebar to change the active tab.",
              "mobileLayout": "It displays only the `InitiateSideBar`, which is configured to take up the full screen width. Navigation to individual chat screens is handled by pushing new `Screen`s onto the stack, not by switching tabs."
            }
          },
          {
            "signature": "InitiateSideBar(isWideScreen: Boolean, rooms: List<RoomItem>, onIconClick: () -> Unit)",
            "description": "This composable acts as a bridge, connecting the top-level navigation logic with the `Sidebar` UI component.",
            "parameters": [
              {
                "name": "isWideScreen",
                "type": "Boolean",
                "description": "A flag indicating if the wide-screen layout should be used."
              },
              {
                "name": "rooms",
                "type": "List<RoomItem>",
                "description": "The list of chat rooms to be displayed."
              },
              {
                "name": "onIconClick",
                "type": "() -> Unit",
                "description": "A callback function to handle clicks on the \"Add Chat\" icon."
              }
            ],
            "functionality": {
              "navigationLogic": "It defines the `onRoomClick` lambda. This is the core of the adaptive navigation. On a wide screen, it changes the active tab in the `TabNavigator` (`tabNavigator?.current = ChatTab(room)`). On a narrow screen, it pushes a new `ChatTabScreen` onto the navigator's stack (`navigator?.push(ChatTabScreen(room))`).",
              "componentInflation": "It calls the main `Sidebar` composable, passing down the prepared data (rooms) and navigation callbacks (`onRoomClick`, `onSettingsClick`, etc.)."
            }
          },
          {
            "signature": "Sidebar(modifier: Modifier, rooms: List<RoomItem>, onRoomClick: (RoomItem) -> Unit, onProfileClick: () -> Unit, onSettingsClick: () -> Unit, onIconClick: () -> Unit)",
            "description": "This is the main presentational composable for the sidebar UI.",
            "parameters": [
              {
                "name": "modifier",
                "type": "Modifier",
                "description": "The modifier to be applied to the sidebar's root `Column`."
              },
              {
                "name": "rooms",
                "type": "List<RoomItem>",
                "description": "The list of chat rooms to display."
              },
              {
                "name": "onRoomClick",
                "type": "(RoomItem) -> Unit",
                "description": "Callback invoked when a chat room is clicked."
              },
              {
                "name": "onProfileClick",
                "type": "() -> Unit",
                "description": "Callback for when the \"Profile\" button is clicked."
              },
              {
                "name": "onSettingsClick",
                "type": "() -> Unit",
                "description": "Callback for when the \"Settings\" button is clicked."
              },
              {
                "name": "onIconClick",
                "type": "() -> Unit",
                "description": "Callback for the \"Add Chat\" FAB item."
              }
            ],
            "functionality": {
              "layout": "It uses a `Scaffold` to easily place a `MultiFloatingActionButton` and a `BottomBar`. The main content area contains the chat list.",
              "chatList": "It displays a `LazyColumn` of chat rooms using the `SidebarRoomItem` composable for each item.",
              "actions": "It integrates the `MultiFloatingActionButton` for adding new chats and groups, and the `BottomBar` for accessing Profile and Settings."
            }
          },
          {
            "signature": "SidebarRoomItem(room: RoomItem, onClick: () -> Unit)",
            "description": "A simple composable that renders a single row in the chat list.",
            "parameters": [
              {
                "name": "room",
                "type": "RoomItem",
                "description": "The data for the chat room to render."
              },
              {
                "name": "onClick",
                "type": "() -> Unit",
                "description": "The callback to invoke when the item is clicked."
              }
            ],
            "functionality": "Displays the room's name and an icon derived from its label. Shows the number of unread messages if it's greater than zero. Has a `clickable` modifier to trigger the `onClick` navigation."
          },
          {
            "signature": "BottomBar(onProfileClick: () -> Unit, onSettingsClick: () -> Unit)",
            "description": "Renders the \"Profile\" and \"Settings\" buttons at the bottom of the sidebar.",
            "parameters": [
              {
                "name": "onProfileClick",
                "type": "() -> Unit",
                "description": "Callback for the \"Profile\" button."
              },
              {
                "name": "onSettingsClick",
                "type": "() -> Unit",
                "description": "Callback for the \"Settings\" button."
              }
            ]
          },
          {
            "signature": "EmptyChatPlaceholder()",
            "description": "A simple UI shown in the main content area on desktop before any chat has been selected, prompting the user to select a chat."
          }
        ]
      },
      "theme/colors.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/theme/colors.kt",
        "description": "This file defines the color palette for the application. It contains the `Colors` object, which specifies the colors used in both the light and dark themes.",
        "objects": [
          {
            "name": "Colors",
            "description": "A data object that holds all the color definitions and color schemes.",
            "properties": [
              {
                "name": "DarkGrayPrimary, LightGrayButton, Charcoal, BrandBlue, etc.",
                "description": "`Color` properties defining the specific colors used in the app."
              },
              {
                "name": "LightColorScheme",
                "description": "A `lightColorScheme` for the app's light theme."
              },
              {
                "name": "DarkColorScheme",
                "description": "A `darkColorScheme` for the app's dark theme, which is used in the `AppTheme`."
              }
            ]
          }
        ]
      },
      "network/KtorClientFactory.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/network/KtorClientFactory.kt",
        "description": "This file provides a factory function for creating and configuring a Ktor `HttpClient`. This client is used for making network requests throughout the application.",
        "functions": [
          {
            "signature": "createKtorClient(): HttpClient",
            "description": "Creates and configures the `HttpClient`.",
            "configuration": {
              "engine": "It uses a platform-specific HTTP client engine provided by the `httpClientEngine()` expect function. This allows for different underlying HTTP clients on Android and JVM.",
              "contentNegotiation": "It installs the `ContentNegotiation` plugin with `Json` for automatic JSON serialization and deserialization.",
              "webSockets": "It installs the `WebSockets` plugin.",
              "logging": "It includes a `Logging` plugin for debugging network requests."
            }
          }
        ],
        "expectedDeclarations": [
          {
            "type": "function",
            "signature": "httpClientEngine(): io.ktor.client.engine.HttpClientEngine",
            "description": "This expect function must be implemented in the platform-specific source sets (`androidMain` and `jvmMain`) to provide the appropriate Ktor client engine."
          }
        ]
      },
      "network/KtorServerFactory.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/network/KtorServerFactory.kt",
        "description": "This file contains the core logic for configuring the Ktor server. It defines an `expect` function to create a platform-specific server factory and a `configureLoopLinkServer` function that sets up the server's modules, plugins, and routing.",
        "functions": [
          {
            "signature": "Application.configureLoopLinkServer()",
            "description": "An extension function for the Ktor `Application` class that applies the server configuration.",
            "configuration": {
              "contentNegotiation": "Configures the server to use JSON for serialization.",
              "webSockets": "Installs and configures the `WebSockets` plugin.",
              "routing": "Defines the following routes: `GET \"/\"`, `GET \"/android\"`, and `webSocket \"/looplink/sync/{roomId}\"`."
            },
            "functionality": [
              "Defines the server's routing, including a WebSocket endpoint at `/looplink/sync/{roomId}`.",
              "The WebSocket endpoint handles new connections, adds them to a synchronized map of connections, and listens for incoming messages.",
              "When a message is received, it is decoded, sent to the `store`, and broadcast to all other clients in the same room."
            ]
          }
        ],
        "expectedDeclarations": [
          {
            "type": "function",
            "signature": "createKtorServerFactory(): ApplicationEngineFactory<ApplicationEngine, *>",
            "description": "This expect function must be implemented in the platform-specific source sets to provide the appropriate Ktor server engine (e.g., Netty for JVM, CIO for Android)."
          }
        ]
      },
      "network/discovery/ServiceInfo.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/network/discovery/ServiceInfo.kt",
        "description": "This file contains a data class that represents a discovered network service. It holds all the necessary information to connect to a service found on the local network.",
        "dataClasses": [
          {
            "name": "ServiceInfo",
            "properties": [
              {
                "name": "instanceName",
                "type": "String",
                "description": "The name of the service instance."
              },
              {
                "name": "serviceName",
                "type": "String",
                "description": "The name of the service itself."
              },
              {
                "name": "hostAddress",
                "type": "String",
                "description": "The IP address of the host providing the service."
              },
              {
                "name": "port",
                "type": "Int",
                "description": "The port number on which the service is running."
              },
              {
                "name": "attributes",
                "type": "Map<String, String>",
                "description": "A map of key-value pairs containing additional service metadata."
              }
            ]
          }
        ]
      },
      "network/discovery/LANServiceDiscovery.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/network/discovery/LANServiceDiscovery.kt",
        "description": "This file defines the `LANServiceDiscovery` class, which is responsible for discovering and registering services on the local area network (LAN). This is an `expect` class, meaning that the actual implementation is provided in the platform-specific source sets (`androidMain` and `jvmMain`).",
        "expectedClasses": [
          {
            "name": "LANServiceDiscovery",
            "description": "A class that provides the core functionality for network service discovery.",
            "functions": [
              {
                "signature": "discoverServices(serviceType: String): Flow<List<ServiceInfo>>",
                "description": "Starts the discovery of services of a given type on the network and returns a `Flow` that emits a list of `ServiceInfo` objects whenever the list of discovered services changes."
              },
              {
                "signature": "registerService(...)",
                "description": "Registers a new service on the network so that other devices can discover it."
              },
              {
                "signature": "unregistedService()",
                "description": "Unregisters a previously registered service."
              },
              {
                "signature": "stopDiscovery()",
                "description": "Stops the service discovery process."
              },
              {
                "signature": "stopDiscovery(serviceType: String?)",
                "description": "Stops the discovery for a specific service type."
              }
            ]
          }
        ]
      },
      "errors/errors.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/errors/errors.kt",
        "description": "This file contains a data object that centralizes error messages used throughout the application.",
        "dataObjects": [
          {
            "name": "errorsLL",
            "description": "A data object containing common error messages.",
            "properties": [
              {
                "name": "timeout_error",
                "description": "Message for timeout errors."
              },
              {
                "name": "captcha_error",
                "description": "Message for captcha-related errors."
              },
              {
                "name": "internet_error",
                "description": "Message for internet connection issues."
              },
              {
                "name": "unknownError",
                "description": "A generic error message."
              }
            ]
          }
        ]
      },
      "secrets/Secrets.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/secrets/Secrets.kt",
        "description": "This file defines an `expect` object for managing API keys and other secrets. The actual values are provided in the platform-specific `actual` declarations to avoid hardcoding secrets in the common code.",
        "expectedObjects": [
          {
            "name": "APIKeys",
            "properties": [
              {
                "name": "ocrKey",
                "type": "String",
                "description": "The API key for the OCR service."
              }
            ]
          }
        ]
      },
      "viewModel/RoomItem.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/viewmodel/RoomItem.kt",
        "description": "This file defines the `RoomItem` data class, which represents a single chat room in the application's state.",
        "dataClasses": [
          {
            "name": "RoomItem",
            "description": "Represents a chat room. It is serializable, allowing it to be easily passed between components or saved.",
            "properties": [
              {
                "name": "id",
                "type": "Int",
                "description": "A unique identifier for the chat room."
              },
              {
                "name": "label",
                "type": "String",
                "description": "The display name of the chat room."
              },
              {
                "name": "unread",
                "type": "Int",
                "description": "The number of unread messages in the room. Defaults to 0."
              },
              {
                "name": "isGroup",
                "type": "Boolean",
                "description": "A flag indicating whether the room is a group chat. Defaults to false."
              },
              {
                "name": "members",
                "type": "List<String>",
                "description": "A list of UIDs of the members in the chat room. Defaults to an empty list."
              }
            ]
          }
        ]
      },
      "viewmodel/PeerDiscoveryViewModel.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/viewmodel/PeerDiscoveryViewModel.kt",
        "description": "This view model manages the process of discovering and connecting to peers on the local network. It uses the `LANServiceDiscovery` class to find other devices and exposes the list of discovered services as a `StateFlow`. It also handles the WebSocket connection lifecycle.",
        "classes": [
          {
            "name": "PeerDiscoveryViewModel",
            "description": "The view model for peer discovery."
          }
        ],
        "sealedClasses": [
          {
            "name": "ConnectionStatus",
            "description": "Represents the current state of a WebSocket connection attempt.",
            "states": [
              {
                "name": "Idle",
                "description": "Indicates that there is no active connection attempt."
              },
              {
                "name": "Connecting",
                "description": "Indicates that a connection attempt is currently in progress."
              },
              {
                "name": "Connected(session: DefaultClientWebSocketSession)",
                "description": "Indicates that a connection has been successfully established and holds the active session."
              },
              {
                "name": "Error(message: String)",
                "description": "Indicates that an error occurred during the connection attempt."
              }
            ]
          }
        ],
        "properties": [
          {
            "name": "discoveredServices",
            "type": "StateFlow<List<ServiceInfo>>",
            "description": "A flow that emits the current list of discovered services on the network."
          },
          {
            "name": "isDiscovering",
            "type": "StateFlow<Boolean>",
            "description": "A flow that emits `true` if the app is currently scanning for services."
          },
          {
            "name": "connectionStatus",
            "type": "StateFlow<ConnectionStatus>",
            "description": "A flow that emits the current status of the WebSocket connection attempt."
          },
          {
            "name": "activeSessions",
            "type": "StateFlow<Map<Int, DefaultWebSocketSession>>",
            "description": "A flow that holds a map of active WebSocket sessions, keyed by their `roomId`."
          }
        ],
        "functions": [
          {
            "signature": "startDiscovery()",
            "description": "Begins the process of discovering services on the network."
          },
          {
            "signature": "stopDiscovery()",
            "description": "Stops the discovery process."
          },
          {
            "signature": "clear()",
            "description": "Stops discovery and cancels the view model's scope."
          },
          {
            "signature": "connectToService(service: ServiceInfo, navigator: Navigator)",
            "description": "Attempts to connect to a discovered service via WebSocket and navigates to the `ChatScreen` on success."
          },
          {
            "signature": "addConnection(roomId: Int, session: DefaultWebSocketSession)",
            "description": "Adds a WebSocket session initiated by a remote peer (i.e., when the local device is the server). This allows for two-way session tracking."
          },
          {
            "signature": "removeConnection(roomId: Int)",
            "description": "Removes a WebSocket session from the `activeSessions` map when the connection is terminated."
          }
        ]
      },
      "viewmodel/ChatViewModel.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/viewmodel/ChatViewModel.kt",
        "description": "This file defines the `ChatViewModel`, which is responsible for managing the state of the chat rooms in the application. It uses a `MutableStateFlow` to hold the list of rooms and provides a function to add new rooms.",
        "classes": [
          {
            "name": "ChatViewModel",
            "type": "ViewModel",
            "description": "Manages the list of chat rooms.",
            "properties": [
              {
                "name": "rooms",
                "type": "StateFlow<List<RoomItem>>",
                "description": "A `StateFlow` that emits the current list of `RoomItem`s."
              }
            ],
            "functions": [
              {
                "signature": "addRoom(roomItem: RoomItem)",
                "description": "Adds a new room to the list if it doesn't already exist."
              },
              {
                "signature": "roomExists(roomId: Int): Boolean",
                "description": "Checks if a room with the given ID already exists."
              }
            ]
          }
        ]
      },
      "webDriver/cuimsAPI.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/webDriver/cuimsAPI.kt",
        "description": "This file defines the `cuimsAPI` class, which is responsible for interacting with the CUIMS web portal. It uses a web driver (like Selenium) to automate the login process, handle captchas, and scrape student data. This is an `expect` class, requiring platform-specific implementations for web driver management and UI display.",
        "dataClasses": [
          {
            "name": "successLog",
            "description": "A simple data class to represent the success or failure of an operation, with an optional message."
          },
          {
            "name": "studentInfo",
            "description": "A data class to hold the scraped student information."
          }
        ],
        "expectedDeclarations": [
          {
            "type": "extension function",
            "signature": "ByteArray.toImageBitmap(): ImageBitmap",
            "description": "An extension function to convert a byte array to a platform-specific `ImageBitmap`."
          },
          {
            "type": "extension function",
            "signature": "ImageBitmap.toBase64(): String",
            "description": "An extension function to convert an `ImageBitmap` to a Base64 string."
          },
          {
            "type": "class",
            "name": "cuimsAPI",
            "description": "The main class for interacting with the CUIMS portal.",
            "properties": [
              {
                "name": "uid, pass",
                "type": "String?",
                "description": "The user's credentials."
              },
              {
                "name": "student",
                "type": "studentInfo?",
                "description": "The scraped student data."
              },
              {
                "name": "BASEURL",
                "type": "String",
                "description": "The base URL of the CUIMS portal."
              },
              {
                "name": "endPoints",
                "type": "Map<String, String>",
                "description": "A map of API endpoints."
              }
            ],
            "functions": [
              {
                "signature": "initDriver()",
                "description": "Initializes the web driver."
              },
              {
                "signature": "login(uid: String, pass: String): successLog",
                "description": "Performs the login process."
              },
              {
                "signature": "getCaptcha(): Pair<successLog, ImageBitmap?>",
                "description": "Retrieves the captcha image."
              },
              {
                "signature": "fillCaptcha(captcha: String): successLog",
                "description": "Fills in the captcha."
              },
              {
                "signature": "endSession()",
                "description": "Ends the web driver session."
              },
              {
                "signature": "processCaptcha(imgBase64: String): String",
                "description": "Processes the captcha image (e.g., using an OCR service)."
              },
              {
                "signature": "autoFillCaptcha(): successLog",
                "description": "Automates the captcha filling process."
              },
              {
                "signature": "getWebView(): Any",
                "description": "Returns the web view instance."
              },
              {
                "signature": "loadStudentData(): Pair<successLog, studentInfo?>",
                "description": "Scrapes the student data from the portal."
              },
              {
                "signature": "destroySession()",
                "description": "Destroys the web driver session."
              }
            ]
          },
          {
            "type": "composable function",
            "signature": "getWebViewer(webView: cuimsAPI, modifier: Modifier)",
            "description": "A composable function to display the web view for manual captcha entry."
          }
        ]
      },
      "components/ProfileCard.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/ProfileCard.kt",
        "description": "This file contains the UI components for displaying a user's profile information. It includes a `UserProfileCard` that adapts to different screen sizes and a `SettingsPage` that displays this card.",
        "dataObjects": [
          {
            "name": "userInfo",
            "description": "A data object that holds the current user's information. It includes a `reset()` function to clear the data.",
            "properties": [
              {
                "name": "name",
                "type": "String?",
                "description": "The user's name."
              },
              {
                "name": "uid",
                "type": "String?",
                "description": "The user's unique identifier."
              },
              {
                "name": "section",
                "type": "String?",
                "description": "The user's section."
              },
              {
                "name": "program",
                "type": "String?",
                "description": "The user's program of study."
              },
              {
                "name": "contact",
                "type": "String?",
                "description": "The user's contact number."
              },
              {
                "name": "cGPA",
                "type": "String?",
                "description": "The user's Cumulative Grade Point Average."
              },
              {
                "name": "email",
                "type": "String?",
                "description": "The user's email address."
              },
              {
                "name": "pfpImage",
                "type": "Boolean?",
                "description": "Indicates whether the user has a profile picture."
              }
            ],
            "functions": [
              {
                "signature": "reset()",
                "description": "Resets all properties of the `userInfo` object to null."
              }
            ]
          }
        ],
        "functions": [
          {
            "signature": "loadUserInfo(database: DatabaseMng)",
            "description": "A function that loads the user's data from the database into the `userInfo` object."
          }
        ],
        "composableFunctions": [
          {
            "signature": "UserProfileCard(modifier: Modifier = Modifier)",
            "description": "A composable that displays the user's profile in a `Card`. It switches between `TallScreenLayout` and `WideScreenLayout` based on the available width."
          },
          {
            "signature": "TallScreenLayout()",
            "description": "A composable for displaying the profile in a vertical layout on narrow screens."
          },
          {
            "signature": "WideScreenLayout()",
            "description": "A composable for displaying the profile in a horizontal layout on wider screens."
          },
          {
            "signature": "ShowUserData()",
            "description": "A composable that displays the individual fields of the user's data (name, UID, etc.)."
          },
          {
            "signature": "SideButtons()",
            "description": "A composable that contains the `FindDevicesButton` and `LogoutButton`."
          },
          {
            "signature": "LogoutButton(modifier: Modifier = Modifier)",
            "description": "A button that logs the user out, clears the database, and navigates to the `LoginFields` screen."
          },
          {
            "signature": "FindDevicesButton(modifier: Modifier = Modifier)",
            "description": "A button that navigates to the `AvailableServicesScreen` to start peer discovery."
          }
        ],
        "classes": [
          {
            "name": "SettingsPage : Screen",
            "description": "A `Screen` that displays the `UserProfileCard` within a `Scaffold`, providing a settings page with a top app bar."
          }
        ]
      },
      "components/textField.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/textField.kt",
        "description": "This file contains a custom `textField` composable that provides a simple, reusable text input field with a placeholder.",
        "composableFunctions": [
          {
            "signature": "textField(onvalueChange: (String) -> Unit, radius: Int, paddingH: Int, paddingV: Int, placeholder: String)",
            "description": "This is a composable function that creates a custom text field.",
            "parameters": [
              {
                "name": "onvalueChange",
                "type": "(String) -> Unit",
                "description": "A callback function that is invoked when the text in the field changes."
              },
              {
                "name": "radius",
                "type": "Int",
                "description": "The corner radius of the text field."
              },
              {
                "name": "paddingH",
                "type": "Int",
                "description": "The horizontal padding of the text field."
              },
              {
                "name": "paddingV",
                "type": "Int",
                "description": "The vertical padding of the text field."
              },
              {
                "name": "placeholder",
                "type": "String",
                "description": "The placeholder text to be displayed when the text field is empty."
              }
            ]
          }
        ]
      },
      "components/customTextField.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/customTextField.kt",
        "description": "This file provides a highly customizable `CustomOutlinedTextField` composable, which is a modified version of the Material Design `OutlinedTextField`. It allows for fine-tuned control over the text field's appearance and behavior.",
        "composableFunctions": [
          {
            "signature": "CustomOutlinedTextField(...)",
            "description": "This composable offers a wide range of parameters to customize the text field, including: `value`, `onValueChange`, `label`, `placeholder`, `leadingIcon`, `trailingIcon`, `isError`, `enabled`, `readOnly`, `shape`, `colors`, `keyboardOptions`, `keyboardActions`."
          }
        ]
      },
      "components/GetProfileImage.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/GetProfileImage.kt",
        "description": "This file defines an `expect` composable function for displaying an image from a byte array. This function must be implemented in the platform-specific source sets (`androidMain` and `jvmMain`) to handle the conversion of the byte array to a platform-specific image format.",
        "expectedComposableFunctions": [
          {
            "signature": "GetProfileImage(bytes: ByteArray?, modifier: Modifier = Modifier)",
            "description": "Displays an image from a byte array."
          }
        ]
      },
      "components/LocalCompositions.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/LocalCompositions.kt",
        "description": "This file defines several `CompositionLocal` providers that make key dependencies available to the entire Compose UI tree. This is a powerful pattern for dependency injection in Compose, as it avoids the need to pass dependencies down through every composable.",
        "compositionLocals": [
          {
            "name": "LocalDatabase",
            "description": "Provides an instance of `DatabaseMng` for database access."
          },
          {
            "name": "LocalCuimsApi",
            "description": "Provides an instance of `cuimsAPI` for interacting with the CUIMS portal."
          },
          {
            "name": "LocalPeerDiscoveryViewModel",
            "description": "Provides an instance of `PeerDiscoveryViewModel` for managing peer discovery."
          },
          {
            "name": "LocalTabNavigator",
            "description": "Provides an instance of `TabNavigator` for managing tab-based navigation."
          },
          {
            "name": "LocalMainNavigator",
            "type": "Navigator?",
            "description": "Provides access to the main Voyager `Navigator` for screen-based navigation."
          },
          {
            "name": "LocalChatViewModel",
            "type": "ChatViewModel?",
            "description": "Provides access to ChatViewModel for managing chat rooms."
          }
        ]
      },
      "components/loginAPIComposable.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/loginAPIComposable.kt",
        "description": "This file contains the UI and logic for the login screen. It includes the `LoginFields` screen, which is responsible for taking user input for UID, password, and captcha, and interacting with the `cuimsAPI` to perform the login.",
        "classes": [
          {
            "name": "LoginFields",
            "description": "A `Screen` that represents the login screen of the application. It handles user input, captcha loading, and the login process.",
            "properties": [
              {
                "name": "onLoginSuccess",
                "type": "() -> Unit",
                "description": "A callback function that is invoked upon a successful login."
              }
            ],
            "composableFunctions": [
              {
                "signature": "Content()",
                "description": "The main composable function for the `LoginFields` screen. It contains the UI for the login form, including text fields for UID, password, and captcha, as well as a submit button and error messages.",
                "functionality": [
                  "Manages the state of the input fields and error messages.",
                  "Loads the captcha image from the `cuimsAPI`.",
                  "Handles the submit button click, which initiates the login process.",
                  "Performs the login by calling the `cuimsAPI.login()` and `cuimsAPI.fillCaptcha()` methods.",
                  "On successful login, it retrieves the student data, inserts it into the database, and navigates to the `MainScreen`."
                ]
              }
            ]
          }
        ],
        "composableFunctions": [
          {
            "signature": "TextFieldFooterErrorMsg(text: String = \"Error\")",
            "description": "A composable that displays an error message below a text field."
          }
        ]
      },
      "components/chat/Data.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/Data.kt",
        "description": "This file defines the data models for the chat functionality, including `User`, `Message`, and `MessageList`. It also includes a `ColorProvider` to assign unique colors to users.",
        "dataClasses": [
          {
            "name": "User",
            "description": "Represents a user in the chat application. It includes their name and an optional profile picture. The `color` property is marked as `@Transient` so it is not included in serialization, and it's assigned a random color by the `ColorProvider` upon instantiation. The `equals` and `hashCode` methods are overridden to ensure proper comparison based on name and picture content.",
            "properties": [
              {
                "name": "name",
                "type": "String",
                "description": "The user's name."
              },
              {
                "name": "color",
                "type": "Color",
                "description": "The color associated with the user, provided by `ColorProvider`."
              },
              {
                "name": "picture",
                "type": "ByteArray?",
                "description": "An optional byte array for the user's profile picture."
              }
            ]
          },
          {
            "name": "Message",
            "description": "Represents a single chat message.",
            "properties": [
              {
                "name": "user",
                "type": "User",
                "description": "The user who sent the message."
              },
              {
                "name": "text",
                "type": "String",
                "description": "The content of the message."
              },
              {
                "name": "seconds",
                "type": "Long",
                "description": "The time the message was sent, in epoch seconds."
              },
              {
                "name": "id",
                "type": "Long",
                "description": "a unique id for the message."
              }
            ]
          },
          {
            "name": "MessageList",
            "description": "Represents a list of chat messages."
          }
        ],
        "objects": [
          {
            "name": "ColorProvider",
            "description": "An object that provides a unique color for each user from a predefined list of colors.",
            "functions": [
              {
                "signature": "getColor(): Color",
                "description": "Returns a unique color for a user."
              }
            ]
          }
        ]
      },
      "components/chat/Store.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/Store.kt",
        "description": "This file defines the `Store` interface, which is a key part of the chat's state management. It uses a Redux-like architecture with a central store that receives actions and updates the state through a reducer. The `createStore` function creates an instance of the store within a coroutine scope.",
        "interfaces": [
          {
            "name": "Store",
            "functions": [
              {
                "signature": "send(action: Action)",
                "description": "Sends an action to the store."
              }
            ],
            "properties": [
              {
                "name": "stateFlow",
                "type": "StateFlow<State>",
                "description": "A `StateFlow` that emits the current state of the chat."
              },
              {
                "name": "state",
                "type": "State",
                "description": "The current state of the chat."
              }
            ]
          }
        ],
        "functions": [
          {
            "signature": "createStore(): Store",
            "description": "A factory function that creates a new `Store` instance."
          }
        ]
      },
      "components/chat/Colors.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/Colors.kt",
        "description": "This file defines a set of colors and gradients for the chat UI.",
        "objects": [
          {
            "name": "ChatColors",
            "description": "An object containing color and gradient definitions for the chat UI.",
            "properties": [
              {
                "name": "GRADIENT_3, GRADIENT_2",
                "description": "Lists of colors for creating gradients."
              },
              {
                "name": "PRIMARY, SURFACE, BACKGROUND",
                "description": "Individual color values."
              },
              {
                "name": "TOP_GRADIENT",
                "description": "A gradient for the top of the chat screen."
              },
              {
                "name": "MY_MESSAGE, OTHERS_MESSAGE",
                "description": "Colors for the message bubbles."
              },
              {
                "name": "TIME_TEXT",
                "description": "The color for the message timestamp."
              }
            ]
          }
        ]
      },
      "components/chat/ChatApp.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/ChatApp.kt",
        "description": "This file provides the core composable functions for the chat user interface. It defines two main composables: `ChatApp`, which contains the essential chat elements like the message list and input field, and `ChatAppWithScaffold`, which wraps `ChatApp` with a Material Design `Scaffold` to provide a top app bar with navigation controls. It also initializes a global user (`myUser`) and the central state management `store` for the chat components.",
        "globalVariables": [
          {
            "name": "myUser",
            "type": "User",
            "description": "A globally accessible `User` object representing the current user of the application."
          },
          {
            "name": "store",
            "type": "Store",
            "description": "A globally accessible instance of the Redux-like store, created by `createStore()`, which manages the state for all chat rooms."
          }
        ],
        "composableFunctions": [
          {
            "signature": "ChatAppWithScaffold(displayTextField: Boolean = true, room: RoomItem, session: DefaultWebSocketSession? = null)",
            "description": "This composable provides a scaffold for the chat screen, including a top app bar with the room's name and a back button. It also handles keyboard focus and WebSocket communication.",
            "parameters": [
              {
                "name": "displayTextField",
                "type": "Boolean",
                "description": "Controls whether the message input field is visible."
              },
              {
                "name": "room",
                "type": "RoomItem",
                "description": "The data object for the current chat room, containing its ID and label."
              },
              {
                "name": "session",
                "type": "DefaultClientWebSocketSession?",
                "description": "The active WebSocket session for sending messages to the remote peer."
              }
            ],
            "functionality": [
              "Wraps the `ChatApp` composable within a `Scaffold`.",
              "Implements a `TopAppBar` that displays the current `room.label` and includes a navigation icon to go back, which sets the `LocalTabNavigator`'s current tab to `EmptyChatTab`.",
              "Manages focus control. It requests focus initially and listens for the 'Escape' key to navigate back or clear focus.",
              "Clears focus when the user taps outside the input fields.",
              "Manages a WebSocket session's lifecycle to listen for, deserialize, and store incoming JSON messages, ensuring the connection is closed when the composable is no longer in use.",
              "Uses `LaunchedEffect` to request focus for the component when it first appears."
            ]
          },
          {
            "signature": "ChatApp(modifier: Modifier = Modifier, displayTextField: Boolean = true, room: RoomItem, session: DefaultClientWebSocketSession? = null)",
            "description": "The core chat UI, responsible for displaying messages and handling message sending.",
            "parameters": [
              {
                "name": "modifier",
                "type": "Modifier",
                "description": "A `Modifier` for customizing the layout."
              },
              {
                "name": "displayTextField",
                "type": "Boolean",
                "description": "If true, the `SendMessage` input composable is displayed."
              },
              {
                "name": "room",
                "type": "RoomItem",
                "description": "The data for the current chat room."
              },
              {
                "name": "session",
                "type": "DefaultClientWebSocketSession?",
                "description": "The active WebSocket session for sending outgoing messages."
              }
            ],
            "functionality": [
              "Collects the latest chat state from the global `store` using `store.stateFlow.collectAsState()`.",
              "Displays the list of messages for the current room using the `Messages` composable, providing it with the message list from `state.rooms[room.id]`.",
              "Includes the `SendMessage` composable at the bottom of the screen.",
              "When the user sends a message, it creates a new `Message` object with the current `myUser`.",
              "It dispatches a `SendMessage` action to the `store` to update the local state.",
              "It launches a coroutine to send the message over the provided WebSocket `session` as a JSON string."
            ]
          }
        ]
      },
      "components/chat/Reducer.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/Reducer.kt",
        "description": "This file defines the `chatReducer` function, which is the core of the chat's state management. It takes the current state and an action, and returns a new state. It also defines the `Action` sealed interface and the `State` data class.",
        "sealedInterfaces": [
          {
            "name": "Action",
            "description": "Represents the possible actions that can be dispatched to the store.",
            "actions": [
              {
                "signature": "SendMessage(roomId: Int, message: Message)",
                "description": "An action to send a message to a specific room."
              },
              {
                "signature": "LoadRoom(roomId: Int)",
                "description": "An action to load a room's data (currently not implemented)."
              }
            ]
          }
        ],
        "dataClasses": [
          {
            "name": "State",
            "description": "Represents the state of the chat, which is a map of room IDs to their message lists."
          }
        ],
        "functions": [
          {
            "signature": "chatReducer(state: State, action: Action): State",
            "description": "The reducer function that handles state updates based on the dispatched action."
          }
        ]
      },
      "components/chat/Messages.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/Messages.kt",
        "description": "This file defines the `Messages` composable, which is responsible for displaying the list of messages in the chat. It also includes a `UserPic` composable for displaying a user's profile picture.",
        "expectedComposableFunctions": [
          {
            "signature": "Messages(modifier: Modifier, messages: List<Message>)",
            "description": "An `expect` composable function that displays a list of messages. This function must be implemented in the platform-specific source sets (`androidMain` and `jvmMain`)."
          }
        ],
        "composableFunctions": [
          {
            "signature": "UserPic(user: User)",
            "description": "A composable that displays a user's profile picture in a circular shape. If the user has no picture, it displays a colored rectangle instead."
          }
        ]
      },
      "components/chat/ChatMessage.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/ChatMessage.kt",
        "description": "This file defines the `ChatMessage` composable, which is responsible for displaying a single chat message. It shows the user's name, profile picture, the message text, and a timestamp. It also includes a `TriangleEdgeShape` to create a speech bubble effect.",
        "composableFunctions": [
          {
            "signature": "Triangle(risingToTheRight: Boolean, background: Color)",
            "description": "A composable that displays a triangular shape, used to create the speech bubble effect."
          },
          {
            "signature": "ChatMessage(isMyMessage: Boolean, message: Message, sameUser: Boolean)",
            "description": "The main composable for displaying a single chat message.",
            "parameters": [
              {
                "name": "isMyMessage",
                "type": "Boolean",
                "description": "A boolean to indicate if the message is from the current user."
              },
              {
                "name": "message",
                "type": "Message",
                "description": "The message to be displayed."
              },
              {
                "name": "sameUser",
                "type": "Boolean",
                "description": "A boolean to indicate if the message is from the same user as the previous one."
              }
            ]
          }
        ],
        "classes": [
          {
            "name": "TriangleEdgeShape",
            "signature": "TriangleEdgeShape(risingToTheRight: Boolean) : Shape",
            "description": "A custom `Shape` that creates a triangular path for the speech bubble effect."
          }
        ]
      },
      "components/chat/SendMessage.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/SendMessage.kt",
        "description": "This file defines the `SendMessage` composable, which is the input field for the chat. It includes a text field, an emoji picker, and a send button. It also handles the logic for sending a message and showing/hiding the emoji panel.",
        "composableFunctions": [
          {
            "signature": "SendMessage(modifier: Modifier, sendMessage: (String) -> Unit)",
            "description": "The main composable for the message input field.",
            "parameters": [
              {
                "name": "sendMessage",
                "type": "(String) -> Unit",
                "description": "A callback function to be invoked when the user sends a message."
              }
            ]
          },
          {
            "signature": "EmojiPanel(onEmojiSelected: (String) -> Unit, modifier: Modifier)",
            "description": "A composable that displays a grid of emojis. When an emoji is selected, the `onEmojiSelected` callback is invoked."
          }
        ]
      },
      "components/chat/EmojiFactory.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/EmojiFactory.kt",
        "description": "This file defines an `expect` function for opening an emoji panel. This function must be implemented in the platform-specific source sets (`androidMain` and `jvmMain`) to provide the appropriate Emoji picker for each platform.",
        "expectedFunctions": [
          {
            "signature": "openEmojiPanel(x: Int, y: Int)",
            "description": "Opens a platform-specific emoji panel at the specified coordinates."
          }
        ]
      },
      "components/chat/EmojiBackground.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/EmojiBackground.kt",
        "description": "This file contains a complex composable that displays a background of animated emojis. It uses a custom `EmojiBgState` class to manage the state of the emojis, including their positions, animations, and the emoji set to be displayed.",
        "composableFunctions": [
          {
            "signature": "EmojiFont()",
            "description": "A composable that loads the custom emoji font."
          },
          {
            "signature": "EmojiBg(...)",
            "description": "The main composable for the emoji background.",
            "parameters": [
              {
                "name": "emojiBgState",
                "type": "EmojiBgState",
                "description": "The state of the emoji background."
              },
              {
                "name": "emojiSize",
                "type": "Dp",
                "description": "The size of the emojis."
              },
              {
                "name": "emojiColor",
                "type": "Color",
                "description": "The color of the emojis."
              },
              {
                "name": "gap",
                "type": "Dp",
                "description": "The gap between the emojis."
              }
            ]
          }
        ],
        "classes": [
          {
            "name": "EmojiBgState",
            "description": "A state class that manages the emoji background. It includes functions for updating the container size, item diameter, and text size. It also handles animations for the emojis."
          }
        ],
        "expectedFunctions": [
          {
            "signature": "getPlatformTextStyle(): PlatformTextStyle",
            "description": "An `expect` function to get the platform-specific text style for emojis."
          }
        ]
      },
      "components/chat/currentTime.common.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/chat/currentTime.common.kt",
        "description": "This file contains a utility function to format a timestamp into a human-readable string (HH:mm).",
        "functions": [
          {
            "signature": "timeToString(seconds: Long): String",
            "description": "Formats a timestamp (in seconds) into a string."
          }
        ]
      },
      "components/fabButtons/FabButtonSub.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/fabButtons/FabButtonSub.kt",
        "description": "This file defines the styling options for the sub-buttons within a multi-action Floating Action Button (FAB). It provides an interface and a composable factory function to create customized sub-button appearances.",
        "interfaces": [
          {
            "name": "FabButtonSub",
            "description": "Defines the required styling properties for a FAB sub-item.",
            "properties": [
              {
                "name": "iconTint",
                "type": "Color",
                "description": "The color of the icon within the sub-button."
              },
              {
                "name": "backgroundTint",
                "type": "Color",
                "description": "The background color of the sub-button."
              }
            ]
          }
        ],
        "composableFunctions": [
          {
            "signature": "FabButtonSub(backgroundTint: Color, iconTint: Color): FabButtonSub",
            "description": "A factory function that constructs a `FabButtonSub` instance. It allows for the customization of the background and icon tints, using default colors from the application's `MaterialTheme` if not explicitly provided."
          }
        ]
      },
      "components/fabButtons/FabButtonState.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/fabButtons/FabButtonState.kt",
        "description": "This file defines the state management for the multi-action Floating Action Button (FAB). It provides a sealed class to represent the FAB's collapsed and expanded states, along with a composable function to remember and manage this state.",
        "sealedClasses": [
          {
            "name": "FabButtonState",
            "description": "Represents the two possible states of the FAB.",
            "objects": [
              "Collapsed: The state where the FAB shows only the main button.",
              "Expand: The state where the FAB also shows its sub-action buttons."
            ],
            "functions": [
              {
                "signature": "isExpanded()",
                "description": "Returns `true` if the state is `Expand`."
              },
              {
                "signature": "toggleValue()",
                "description": "Switches the state between `Collapsed` and `Expand`."
              }
            ]
          }
        ],
        "composableFunctions": [
          {
            "signature": "rememberMultiFabState()",
            "description": "A composable function that creates and remembers an instance of `MutableState<FabButtonState>`, initialized to `FabButtonState.Collapsed`. This allows the FAB's state to be preserved across recompositions."
          }
        ]
      },
      "components/fabButtons/FabButtonMain.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/fabButtons/FabButtonMain.kt",
        "description": "This file defines the properties and creation of the main Floating Action Button (FAB) in a multi-action FAB component. It specifies the icon for the button and its rotation behavior when the FAB is expanded.",
        "interfaces": [
          {
            "name": "FabButtonMain",
            "description": "Defines the properties for the main FAB.",
            "properties": [
              {
                "name": "iconRes",
                "type": "ImageVector",
                "description": "The icon to be displayed on the main FAB."
              },
              {
                "name": "iconRotate",
                "type": "Float?",
                "description": "The angle in degrees to rotate the icon when the FAB is in its expanded state. A null value means no rotation."
              }
            ]
          }
        ],
        "functions": [
          {
            "signature": "FabButtonMain(iconRes: ImageVector, iconRotate: Float): FabButtonMain",
            "description": "A factory function that creates an instance of `FabButtonMain`. It allows customization of the icon and rotation angle, providing default values for a common \"add\" icon that rotates 45 degrees."
          }
        ]
      },
      "components/fabButtons/FabButtonItem.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/fabButtons/FabButtonItem.kt",
        "description": "This file defines the data model for an individual item within a multi-action Floating Action Button (FAB) component. Each item represents a specific action that the user can take.",
        "dataClasses": [
          {
            "name": "FabButtonItem",
            "signature": "FabButtonItem(iconRes: ImageVector, label: String, onClick: () -> Unit)",
            "description": "Represents a single action item in the FAB.",
            "properties": [
              {
                "name": "iconRes",
                "type": "ImageVector",
                "description": "The icon to be displayed for this action item."
              },
              {
                "name": "label",
                "type": "String",
                "description": "The text label that describes the action."
              },
              {
                "name": "onClick",
                "type": "() -> Unit",
                "description": "The lambda function that is invoked when the user clicks on this action item."
              }
            ]
          }
        ]
      },
      "components/fabButtons/ExpandedFabButton.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/components/fabButtons/ExpandedFabButton.kt",
        "description": "This file contains the core implementation of the multi-action Floating Action Button (FAB). It provides composable functions to build a main FAB that can be expanded to reveal a list of smaller, secondary action buttons. The expansion is animated, and the main FAB icon can be configured to rotate when the state changes.",
        "composableFunctions": [
          {
            "signature": "MultiFloatingActionButton(...)",
            "description": "This is the main composable for the multi-action FAB.",
            "parameters": [
              {
                "name": "items",
                "type": "List<FabButtonItem>",
                "description": "A list of `FabButtonItem` objects, each representing a secondary action."
              },
              {
                "name": "fabState",
                "type": "MutableState<FabButtonState>",
                "description": "The state of the FAB (collapsed or expanded)."
              },
              {
                "name": "fabIcon",
                "type": "FabButtonMain",
                "description": "The configuration for the main FAB's icon and rotation."
              },
              {
                "name": "fabOption",
                "type": "FabButtonSub",
                "description": "The styling options for the sub-action buttons."
              },
              {
                "name": "stateChanged",
                "type": "(fabState: FabButtonState) -> Unit",
                "description": "A callback invoked when the FAB's state changes."
              }
            ],
            "functionality": "Displays a primary `FloatingActionButton`. Animates the rotation of the main FAB's icon based on the `fabState`. When `fabState` is `Expand`, it uses `AnimatedVisibility` to show a `LazyColumn` of `MiniFabItem`s with a smooth animation. Toggles the `fabState` when the main FAB is clicked."
          },
          {
            "signature": "MiniFabItem(item: FabButtonItem, fabOption: FabButtonSub)",
            "description": "This composable renders a single secondary action item.",
            "parameters": [
              {
                "name": "item",
                "type": "FabButtonItem",
                "description": "The data for the item, including its icon, label, and `onClick` action."
              },
              {
                "name": "fabOption",
                "type": "FabButtonSub",
                "description": "The styling for the sub-button."
              }
            ],
            "functionality": "Displays a `Row` containing a text label and a small `FloatingActionButton`. The `onClick` lambda from the `item` is attached to the button."
          }
        ]
      },
      "operations/Logout.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/operations/Logout.kt",
        "description": "This file contains the `logout` composable function, which is responsible for handling the user logout process. It stops all network services, deletes user data from the local database, and resets the `userInfo` object.",
        "composableFunctions": [
          {
            "signature": "logout(database: DatabaseMng)",
            "description": "This function performs the necessary cleanup tasks when a user logs out.",
            "functionality": [
              "Stops the peer discovery service using `LocalPeerDiscoveryViewModel`.",
              "Stops the main P2P services (including the Ktor server) via `LocalMainViewModel`.",
              "Deletes all user data from the local database by calling `database.deleteUser()`.",
              "Resets the global `userInfo` object to clear any cached user data."
            ]
          }
        ]
      },
      "operations/tabSelector.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/operations/tabSelector.kt",
        "description": "This file provides a set of utility functions for handling navigation in a responsive UI that adapts between a tab-based layout (for wide screens) and a screen-stacking layout (for narrow screens). It leverages the Voyager navigation library to conditionally push screens or switch tabs based on the screen width.",
        "composableFunctions": [
          {
            "signature": "NavMain(screen: Screen)",
            "description": "A convenience composable function that pushes a new `Screen` onto the main navigator.",
            "functionality": "It retrieves the main `Navigator` instance using `getMainNav()` and then calls its `push` method with the provided `screen`."
          },
          {
            "signature": "PushToNavigator(isWideSceren: Boolean, screen: Screen, tab: Tab)",
            "description": "A composable function that intelligently navigates to either a `Tab` or a `Screen` based on whether the display is wide or narrow.",
            "functionality": "If `isWideSceren` is true, it sets the current tab of the `LocalTabNavigator`. If false, it pushes the given `screen` onto the main navigator stack."
          },
          {
            "signature": "getMainNav(): Navigator?",
            "description": "This function is a crucial utility for retrieving the correct `Navigator` instance in a potentially nested navigation setup.",
            "functionality": "It checks if a `LocalTabNavigator` exists. If it does, it means the current context is within a tab, so it returns the parent navigator. If not, it returns the current navigator from `LocalNavigator`. This ensures that screen pushes happen on the main navigation stack, not within a tab."
          }
        ],
        "functions": [
          {
            "signature": "PushToNavigator(isWideSceren: Boolean, screen: Screen, tab: Tab, navigator: Navigator?, tabNavigator: TabNavigator?)",
            "description": "A non-composable version of the navigation function, allowing navigation logic to be called from outside of a composable context (e.g., from a ViewModel or a callback).",
            "functionality": "It takes the navigator instances as explicit parameters and performs the same conditional logic as its composable counterpart."
          }
        ]
      },
      "operations/InsertUserDataFromProfile.kt": {
        "path": "composeApp/src/commonMain/kotlin/org/asv/looplink/operations/InsertUserDataFromProfile.kt",
        "description": "This file contains a utility function to insert scraped student profile data into the local database and update the current user's in-memory information.",
        "functions": [
          {
            "signature": "insertUserDataFromProfile(databaseMng: DatabaseMng, it: studentInfo, myUser: User)",
            "parameters": [
              {
                "name": "databaseMng",
                "type": "DatabaseMng",
                "description": "An instance of the database manager for local data storage."
              },
              {
                "name": "it",
                "type": "studentInfo",
                "description": "A `studentInfo` object containing the scraped data from the CUIMS portal."
              },
              {
                "name": "myUser",
                "type": "User",
                "description": "The `User` object representing the current user, whose details will be updated."
              }
            ],
            "functionality": [
              "Inserts the student's full details (name, UID, section, program, contact, cGPA, email, profile picture bytes) into the database.",
              "Updates the `myUser` object's `name` and `picture` properties with the corresponding values from the `studentInfo` object."
            ]
          }
        ]
      }
    },
    "androidMain": {
      "MainActivity.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/MainActivity.kt",
        "description": "This file is the main entry point for the LoopLink Android application. It hosts the `MainActivity` and the `MainViewModel`, which are central to the app's lifecycle and state management. The `MainViewModel` is responsible for initializing and coordinating all major components, including the database, web API, Ktor server, and network service discovery. The `MainActivity` sets up the Compose UI and uses a `CompositionLocalProvider` to make the `MainViewModel` and its dependencies available to the entire composable tree.",
        "sealedClasses": [
          {
            "name": "P2PState",
            "description": "Represents the state of the peer-to-peer (P2P) services.",
            "states": [
              {
                "name": "Stopped",
                "description": "Indicates that the P2P services are not running."
              },
              {
                "name": "Running",
                "description": "Indicates that the P2P services are active and holds the user's UID and name."
              }
            ]
          }
        ],
        "classes": [
          {
            "name": "MainViewModel",
            "description": "This is the actual implementation of the main view model for the Android platform. It manages the lifecycle of the application's core components.",
            "properties": [
              {
                "name": "serverManager",
                "type": "AndroidKtorServer",
                "description": "Manages the Ktor server instance."
              },
              {
                "name": "database",
                "type": "DatabaseMng",
                "description": "Handles database operations."
              },
              {
                "name": "cuimsAPI",
                "type": "cuimsAPI",
                "description": "Manages interactions with the CUIMS web portal."
              },
              {
                "name": "lanServiceDiscovery",
                "type": "LANServiceDiscovery",
                "description": "Handles network service discovery."
              },
              {
                "name": "chatViewModel",
                "type": "ChatViewModel",
                "description": "Manages the state of chat rooms."
              },
              {
                "name": "peerDiscoveryViewModel",
                "type": "PeerDiscoveryViewModel?",
                "description": "Manages the discovery of peers on the network."
              },
              {
                "name": "p2pState",
                "type": "StateFlow<P2PState>",
                "description": "A flow that emits the current state of the P2P services."
              }
            ],
            "functions": [
              {
                "signature": "startP2PServices()",
                "description": "Initializes and starts the Ktor server and peer discovery services. This is typically called after a successful login."
              },
              {
                "signature": "stopP2PServices()",
                "description": "Stops the Ktor server and peer discovery."
              },
              {
                "signature": "onCleared()",
                "description": "Called when the ViewModel is about to be destroyed. It ensures all services are stopped and resources are released."
              }
            ]
          },
          {
            "name": "MainActivity",
            "description": "The main and only activity in the application.",
            "functions": [
              {
                "signature": "onCreate(savedInstanceState: Bundle?)",
                "description": "Sets up the main content view of the application. It initializes the `MainViewModel`, provides it and its dependencies to the `App` composable via `CompositionLocalProvider`, and defines a callback (`onLoginSuccess`) to start P2P services."
              }
            ]
          }
        ]
      },
      "Platform.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/Platform.android.kt",
        "description": "This file provides the Android-specific implementations for the `expect` declarations in `commonMain/Platform.kt`. It defines the `AndroidPlatform` class, which provides the platform name, and the `DriverFactory` class, which creates an `AndroidSqliteDriver` for the database. It also returns the correct `PlatformType`.",
        "classes": [
          {
            "name": "AndroidPlatform",
            "signature": "AndroidPlatform : Platform",
            "description": "The Android-specific implementation of the `Platform` interface."
          },
          {
            "name": "DriverFactory",
            "description": "The Android-specific implementation of the `DriverFactory` class."
          }
        ],
        "functions": [
          {
            "signature": "getPlatform()",
            "description": "Returns an instance of the `AndroidPlatform` class."
          },
          {
            "signature": "getPlatformType()",
            "description": "Returns `PlatformType.ANDROID`."
          }
        ]
      },
      "network/AndroidKtorServer.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/network/AndroidKtorServer.kt",
        "description": "This file contains the `AndroidKtorServer` class, which manages the lifecycle of the Ktor server on the Android platform. It handles starting and stopping the server, as well as registering and unregistering the service with `LANServiceDiscovery`.",
        "classes": [
          {
            "name": "AndroidKtorServer",
            "description": "Manages the Ktor server instance on Android.",
            "properties": [
              {
                "name": "serverEngine",
                "type": "EmbeddedServer<ApplicationEngine, *>",
                "description": "The embedded Ktor server engine."
              },
              {
                "name": "serverJob",
                "type": "Job",
                "description": "The coroutine job for the server."
              },
              {
                "name": "serverScope",
                "type": "CoroutineScope",
                "description": "The coroutine scope for the server."
              },
              {
                "name": "currentPort",
                "type": "Int",
                "description": "The port the server is running on."
              },
              {
                "name": "isRunning",
                "type": "Boolean",
                "description": "A boolean indicating if the server is running."
              },
              {
                "name": "serviceDiscovery",
                "type": "LANServiceDiscovery",
                "description": "An instance of `LANServiceDiscovery`."
              },
              {
                "name": "serviceType",
                "type": "String",
                "description": "The service type for network service discovery."
              },
              {
                "name": "serviceInstanceName",
                "type": "String",
                "description": "The instance name for network service discovery."
              },
              {
                "name": "onServerPortChanged",
                "type": "((Int) -> Unit)?",
                "description": "A callback for when the server port changes."
              }
            ],
            "functions": [
              {
                "signature": "start(port: Int, userUid: String, userName: String, chatViewModel: ChatViewModel, peerDiscoveryViewModel: PeerDiscoveryViewModel?)",
                "description": "Starts the Ktor server. It creates the server using `createKtorServerFactory()`, configures it with `configureLoopLinkServer()`, and registers the service with `LANServiceDiscovery`."
              },
              {
                "signature": "stop()",
                "description": "Stops the Ktor server."
              },
              {
                "signature": "isRunning(): Boolean",
                "description": "Returns whether the server is running."
              },
              {
                "signature": "getCurrentPort(): Int",
                "description": "Returns the current port of the server."
              },
              {
                "signature": "close()",
                "description": "Stops the server and closes the service discovery."
              }
            ]
          }
        ]
      },
      "network/KtorClientFactory.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/network/KtorClientFactory.android.kt",
        "description": "This file provides the Android-specific implementation for the `httpClientEngine` function, which returns an instance of the `CIO` engine.",
        "functions": [
          {
            "signature": "httpClientEngine(): HttpClientEngine",
            "description": "Returns an instance of the `CIO` HTTP client engine."
          }
        ]
      },
      "network/KtorServerFactory.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/network/KtorServerFactory.android.kt",
        "description": "This file provides the Android-specific implementation for the `createKtorServerFactory` function, which returns an instance of the `CIO` engine.",
        "functions": [
          {
            "signature": "createKtorServerFactory(): ApplicationEngineFactory<ApplicationEngine, *>",
            "description": "Returns an instance of the `CIO` server engine."
          }
        ]
      },
      "network/discovery/LANServiceDiscovery.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/network/discovery/LANServiceDiscovery.android.kt",
        "description": "This file provides the Android-specific implementation for the `LANServiceDiscovery` class. It uses Android's `NsdManager` to discover and register services on the local network.",
        "classes": [
          {
            "name": "LANServiceDiscovery",
            "description": "The Android-specific implementation of the `LANServiceDiscovery` class.",
            "functions": [
              {
                "signature": "discoverServices(serviceType: String): Flow<List<ServiceInfo>>",
                "description": "Discovers services using `NsdManager` and returns a `Flow` of `ServiceInfo` objects."
              },
              {
                "signature": "registerService(...)",
                "description": "Registers a service using `NsdManager`."
              },
              {
                "signature": "unregistedService()",
                "description": "Unregisters a service."
              },
              {
                "signature": "stopDiscovery()",
                "description": "Stops the discovery process."
              },
              {
                "signature": "close()",
                "description": "Stops discovery and unregisters the service."
              }
            ]
          }
        ]
      },
      "secrets/Secrets.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/secrets/Secrets.android.kt",
        "description": "This file provides the Android-specific implementation for the `APIKeys` object. It retrieves the OCR API key from the `BuildConfig` file, which is generated at compile time. This is a secure way to store API keys without hardcoding them in the source code.",
        "objects": [
          {
            "name": "APIKeys",
            "description": "The Android-specific implementation of the `APIKeys` object.",
            "properties": [
              {
                "name": "ocrKey",
                "type": "String",
                "description": "The OCR API key, retrieved from `BuildConfig.ocrSpaceAPIKEY`."
              }
            ]
          }
        ]
      },
      "webDriver/cuimsAPI.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/webDriver/cuimsAPI.android.kt",
        "description": "This file contains the Android-specific implementation of the `cuimsAPI` class, which uses an Android `WebView` to interact with the CUIMS website. It uses JavaScript injection to automate the login process, capture captcha images, and scrape student data.",
        "classes": [
          {
            "name": "cuimsAPI",
            "description": "The Android-specific implementation of the `cuimsAPI` class.",
            "functions": [
              {
                "signature": "initDriver()",
                "description": "Initializes the `WebView`."
              },
              {
                "signature": "login(uid: String, pass: String)",
                "description": "Automates the login process."
              },
              {
                "signature": "getCaptcha()",
                "description": "Captures the captcha image from the `WebView`."
              },
              {
                "signature": "fillCaptcha(captcha: String)",
                "description": "Fills the captcha and submits the login form."
              },
              {
                "signature": "processCaptcha(imgBase64: String)",
                "description": "Uses an OCR API to solve the captcha."
              },
              {
                "signature": "loadStudentData()",
                "description": "Scrapes student data from the profile and results pages."
              },
              {
                "signature": "getWebViewer(webView: cuimsAPI, modifier: Modifier)",
                "description": "A composable function to display the `WebView` in the UI."
              }
            ]
          }
        ],
        "functions": [
          {
            "signature": "ByteArray.toImageBitmap()",
            "description": "Converts a `ByteArray` to a Compose `ImageBitmap`."
          },
          {
            "signature": "ImageBitmap.toBase64()",
            "description": "Converts an `ImageBitmap` to a Base64 string."
          }
        ]
      },
      "components/GetProfileImage.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/components/GetProfileImage.android.kt",
        "description": "This file provides the Android-specific implementation for the `GetProfileImage` composable function. It decodes a `ByteArray` into a `Bitmap` and displays it using the `Image` composable.",
        "composableFunctions": [
          {
            "signature": "GetProfileImage(bytes: ByteArray?, modifier: Modifier)",
            "description": "The Android-specific implementation of the `GetProfileImage` composable."
          }
        ]
      },
      "components/chat/Messages.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/components/chat/Messages.android.kt",
        "description": "This file provides the Android-specific implementation for the `Messages` composable. It uses a `LazyColumn` to display the list of messages and automatically scrolls to the bottom when a new message is added.",
        "composableFunctions": [
          {
            "signature": "Messages(modifier: Modifier, messages: List<Message>)",
            "description": "The Android-specific implementation of the `Messages` composable."
          }
        ]
      },
      "components/chat/EmojiBackground.android.kt": {
        "path": "composeApp/src/androidMain/kotlin/org/asv/looplink/components/chat/EmojiBackground.android.kt",
        "description": "This file provides the Android-specific implementation for the `getPlatformTextStyle` and `openEmojiPanel` functions. `getPlatformTextStyle` is configured to disable the default emoji support, and `openEmojiPanel` is a stub that currently does nothing.",
        "functions": [
          {
            "signature": "getPlatformTextStyle()",
            "description": "Returns a `PlatformTextStyle` with emoji support disabled."
          },
          {
            "signature": "openEmojiPanel(x: Int, y: Int)",
            "description": "An empty function, intended to open a platform-specific emoji panel."
          }
        ]
      }
    },
    "jvmMain": {
      "main.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/main.kt",
        "description": "This is the main entry point for the LoopLink JVM (Desktop) application. It sets up the main application window and initializes the `MainViewModel`. The `MainViewModel` is responsible for setting up the database, CUIMS API, service discovery, and starting the Ktor server. The `main` function also defines the application's lifecycle, including a graceful shutdown process.",
        "sealedClasses": [
          {
            "name": "P2PState",
            "description": "Represents the state of the peer-to-peer (P2P) services.",
            "states": [
              {
                "name": "Stopped",
                "description": "Indicates that the P2P services are not running."
              },
              {
                "name": "Running",
                "description": "Indicates that the P2P services are active and holds the user's UID and name."
              }
            ]
          }
        ],
        "classes": [
          {
            "name": "MainViewModel",
            "description": "The JVM-specific `actual` implementation of the `MainViewModel`. It manages the lifecycle of core application components for the desktop version.",
            "properties": [
              {
                "name": "database",
                "type": "DatabaseMng",
                "description": "Handles database operations."
              },
              {
                "name": "cuimsAPI",
                "type": "cuimsAPI",
                "description": "Manages interactions with the CUIMS web portal using Selenium."
              },
              {
                "name": "clientLanDiscovery",
                "type": "LANServiceDiscovery",
                "description": "Handles network service discovery for finding other peers."
              },
              {
                "name": "chatViewModel",
                "type": "ChatViewModel",
                "description": "Manages the state of chat rooms."
              },
              {
                "name": "peerDiscoveryViewModel",
                "type": "PeerDiscoveryViewModel?",
                "description": "Manages the discovery of and connection to peers."
              },
              {
                "name": "p2pState",
                "type": "StateFlow<P2PState>",
                "description": "A flow that emits the current state of the P2P services."
              }
            ],
            "functions": [
              {
                "signature": "startP2PServices()",
                "description": "Initializes and starts the Ktor server via `jvmKtorServerRunner` and initializes the `PeerDiscoveryViewModel`. This is called after a successful login."
              },
              {
                "signature": "stopP2PServices()",
                "description": "Stops the Ktor server and peer discovery."
              },
              {
                "signature": "onCleared()",
                "description": "Called when the ViewModel is about to be destroyed. It ensures all services are stopped and resources are released."
              }
            ]
          }
        ],
        "functions": [
          {
            "signature": "main()",
            "description": "The main function that launches the desktop application. It sets up the application window, creates the `MainViewModel`, provides it and its dependencies to the `App` composable via `CompositionLocalProvider`, and sets up a shutdown hook for graceful resource cleanup."
          }
        ]
      },
      "Platform.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/Platform.jvm.kt",
        "description": "This file provides the JVM-specific implementations for the `expect` declarations in `commonMain/Platform.kt`. It defines the `JVMPlatform` class, which provides the platform name, and the `DriverFactory` class, which creates a `JdbcSqliteDriver` for the database. It also returns the correct `PlatformType`.",
        "classes": [
          {
            "name": "JVMPlatform",
            "signature": "JVMPlatform : Platform",
            "description": "The JVM-specific implementation of the `Platform` interface."
          },
          {
            "name": "DriverFactory",
            "description": "The JVM-specific implementation of the `DriverFactory` class."
          }
        ],
        "functions": [
          {
            "signature": "getPlatform()",
            "description": "Returns an instance of the `JVMPlatform` class."
          },
          {
            "signature": "getPlatformType()",
            "description": "Returns `PlatformType.DESKTOP`."
          }
        ]
      },
      "network/KtorClientFactory.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/network/KtorClientFactory.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `httpClientEngine` function, which returns an instance of the `Apache` engine.",
        "functions": [
          {
            "signature": "httpClientEngine(): HttpClientEngine",
            "description": "Returns an instance of the `Apache` HTTP client engine."
          }
        ]
      },
      "network/KtorServerFactory.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/network/KtorServerFactory.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `createKtorServerFactory` function, which returns an instance of the `Netty` engine.",
        "functions": [
          {
            "signature": "createKtorServerFactory(): ApplicationEngineFactory<ApplicationEngine, *>",
            "description": "Returns an instance of the `Netty` server engine."
          }
        ]
      },
      "network/JvmKtorServerRunner.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/network/JvmKtorServerRunner.kt",
        "description": "This file defines the `jvmKtorServerRunner` object, which is responsible for managing the lifecycle of the Ktor server on JVM platforms. It handles starting, stopping, and registering the server as a service on the local network using `LANServiceDiscovery`.",
        "objects": [
          {
            "name": "jvmKtorServerRunner",
            "properties": [
              {
                "name": "serverEngine",
                "type": "EmbeddedServer<ApplicationEngine, *>?",
                "description": "The Ktor `EmbeddedServer` instance."
              },
              {
                "name": "serverJob",
                "type": "Job?",
                "description": "The coroutine job managing the server's lifecycle."
              },
              {
                "name": "serverScope",
                "type": "CoroutineScope",
                "description": "The coroutine scope for server operations."
              },
              {
                "name": "currentPort",
                "type": "Int",
                "description": "The port the server is currently running on."
              },
              {
                "name": "isRunning",
                "type": "Boolean",
                "description": "Indicates if the server is currently running."
              },
              {
                "name": "serviceDiscovery",
                "type": "LANServiceDiscovery",
                "description": "An instance of `LANServiceDiscovery` for network service management."
              },
              {
                "name": "SERVICE_TYPE",
                "type": "String",
                "description": "The service type for network discovery (`_looplink._tcp`)."
              },
              {
                "name": "serviceInstanceName",
                "type": "String",
                "description": "The instance name for the registered service."
              }
            ],
            "functions": [
              {
                "signature": "start(port: Int = 0, instanceName: String = serviceInstanceName): Int",
                "description": "Starts the Ktor server, registers the service on the network, and returns the port it's running on.",
                "parameters": [
                  {
                    "name": "port",
                    "type": "Int",
                    "description": "The desired port for the server. If 0, a random available port is used."
                  },
                  {
                    "name": "instanceName",
                    "type": "String",
                    "description": "The instance name for the service registration."
                  }
                ]
              },
              {
                "signature": "stop()",
                "description": "Stops the Ktor server and unregisters the service."
              },
              {
                "signature": "isRunning(): Boolean",
                "description": "Returns `true` if the server is active."
              },
              {
                "signature": "getCurrentPort(): Int",
                "description": "Returns the port the server is running on, or 0 if not active."
              },
              {
                "signature": "closeDiscovery()",
                "description": "Closes the service discovery mechanism."
              }
            ]
          }
        ]
      },
      "network/discovery/LANServiceDiscovery.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/network/discovery/LANServiceDiscovery.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `LANServiceDiscovery` class. It utilizes Java's MulticastSocket for service discovery and registration on the local network.",
        "classes": [
          {
            "name": "LANServiceDiscovery",
            "description": "The JVM-specific implementation of the `LANServiceDiscovery` class.",
            "functions": [
              {
                "signature": "discoverServices(serviceType: String): Flow<List<ServiceInfo>>",
                "description": "Discovers services using MulticastSocket and returns a `Flow` of `ServiceInfo` objects."
              },
              {
                "signature": "registerService(...)",
                "description": "Registers a service using MulticastSocket."
              },
              {
                "signature": "unregistedService()",
                "description": "Unregisters a service."
              },
              {
                "signature": "stopDiscovery()",
                "description": "Stops the discovery process."
              },
              {
                "signature": "close()",
                "description": "Stops discovery and unregisters the service."
              }
            ]
          }
        ]
      },
      "secrets/Secrets.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/secrets/Secrets.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `APIKeys` object. It retrieves the OCR API key from environment variables, which is a secure way to manage secrets in production environments.",
        "objects": [
          {
            "name": "APIKeys",
            "description": "The JVM-specific implementation of the `APIKeys` object.",
            "properties": [
              {
                "name": "ocrKey",
                "type": "String",
                "description": "The OCR API key, retrieved from the `OCR_SPACE_API_KEY` environment variable."
              }
            ]
          }
        ]
      },
      "webDriver/cuimsAPI.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/webDriver/cuimsAPI.jvm.kt",
        "description": "This file contains the JVM-specific implementation of the `cuimsAPI` class, which uses Selenium WebDriver (specifically, ChromeDriver) to interact with the CUIMS website. It automates the login process, handles captcha images, and scrapes student data.",
        "classes": [
          {
            "name": "cuimsAPI",
            "description": "The JVM-specific implementation of the `cuimsAPI` class.",
            "functions": [
              {
                "signature": "initDriver()",
                "description": "Initializes the Selenium ChromeDriver."
              },
              {
                "signature": "login(uid: String, pass: String)",
                "description": "Automates the login process using Selenium."
              },
              {
                "signature": "getCaptcha()",
                "description": "Captures the captcha image from the web page."
              },
              {
                "signature": "fillCaptcha(captcha: String)",
                "description": "Fills the captcha and submits the login form."
              },
              {
                "signature": "processCaptcha(imgBase64: String)",
                "description": "Uses an OCR API to solve the captcha."
              },
              {
                "signature": "loadStudentData()",
                "description": "Scrapes student data from the profile and results pages."
              },
              {
                "signature": "getWebView(): Any",
                "description": "Returns the WebDriver instance."
              },
              {
                "signature": "destroySession()",
                "description": "Quits the WebDriver session."
              }
            ]
          }
        ],
        "functions": [
          {
            "signature": "ByteArray.toImageBitmap()",
            "description": "Converts a `ByteArray` to a Compose `ImageBitmap`."
          },
          {
            "signature": "ImageBitmap.toBase64()",
            "description": "Converts an `ImageBitmap` to a Base64 string."
          }
        ]
      },
      "components/GetProfileImage.jvm.kt": {
        "path": "composeApp/src/jvmMain/java/org/asv/looplink/components/GetProfileImage.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `GetProfileImage` composable function. It decodes a `ByteArray` into a `Bitmap` and displays it using the `Image` composable.",
        "composableFunctions": [
          {
            "signature": "GetProfileImage(bytes: ByteArray?, modifier: Modifier)",
            "description": "The JVM-specific implementation of the `GetProfileImage` composable."
          }
        ]
      },
      "components/chat/Messages.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/components/chat/Messages.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `Messages` composable. It uses a `LazyColumn` to display the list of messages and automatically scrolls to the bottom when a new message is added.",
        "composableFunctions": [
          {
            "signature": "Messages(modifier: Modifier, messages: List<Message>)",
            "description": "The JVM-specific implementation of the `Messages` composable."
          }
        ]
      },
      "components/chat/EmojiFactory.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/org/asv/looplink/components/chat/EmojiFactory.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `openEmojiPanel` function, which is an `expect` declaration from `commonMain/components/chat/EmojiFactory.kt`. On Windows, it uses Java's `Robot` class to simulate the `Windows + .` key combination, which typically opens the emoji panel. For other operating systems, it logs a message indicating that the functionality is only supported on Windows.",
        "functions": [
          {
            "signature": "openEmojiPanel(x: Int, y: Int)",
            "parameters": [
              {
                "name": "x",
                "type": "Int",
                "description": "The X-coordinate for positioning the emoji panel (currently unused)."
              },
              {
                "name": "y",
                "type": "Int",
                "description": "The Y-coordinate for positioning the emoji panel (currently unused)."
              }
            ],
            "functionality": "Checks the operating system. If Windows, simulates the `Windows + .` key press to open the system emoji panel. For other OS, prints a message indicating lack of support."
          }
        ]
      },
      "components/chat/EmojiBackground_jvm.kt": {
        "path": "composeApp/src/jvmMain/java/org/asv/looplink/components/chat/emojiBackground_jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `getPlatformTextStyle` function, which is an `expect` declaration from `commonMain/components/chat/EmojiBackground.kt`. It configures the text style to disable default emoji support, ensuring custom emoji rendering can be applied.",
        "functions": [
          {
            "signature": "getPlatformTextStyle(): PlatformTextStyle",
            "functionality": "Returns a `PlatformTextStyle` with `spanStyle` and `paragraphStyle` set to `null`, effectively disabling platform-specific emoji rendering."
          }
        ]
      },
      "ui/theme/Type.jvm.kt": {
        "path": "composeApp/src/jvmMain/kotlin/ui/theme/Type.jvm.kt",
        "description": "This file provides the JVM-specific implementation for the `resource` function, which is used for loading fonts in Compose Multiplatform. It wraps the platform-agnostic font path, weight, and style into a JVM-specific `androidx.compose.ui.text.platform.Font` object.",
        "functions": [
          {
            "signature": "resource(path: String, weight: FontWeight, style: FontStyle): Font",
            "parameters": [
              {
                "name": "path",
                "type": "String",
                "description": "The path to the font resource."
              },
              {
                "name": "weight",
                "type": "FontWeight",
                "description": "The font weight (e.g., `FontWeight.Normal`, `FontWeight.Bold`)."
              },
              {
                "name": "style",
                "type": "FontStyle",
                "description": "The font style (e.g., `FontStyle.Normal`, `FontStyle.Italic`)."
              }
            ],
            "functionality": "Creates and returns a `androidx.compose.ui.text.platform.Font` instance using the provided parameters."
          }
        ]
      }
    },
    "LLData.sq": {
      "path": "composeApp/src/commonMain/sqldelight/com/db/LLData.sq",
      "description": "This file defines the SQLDelight schema for the local SQLite database used in the LoopLink project. It specifies the `LoopLinkUser` table and the SQL queries for common database operations such as inserting, retrieving, and deleting user data.",
      "tableSchema": {
        "name": "LoopLinkUser",
        "description": "Stores user-related information.",
        "columns": [
          {
            "name": "name",
            "type": "TEXT NOT NULL",
            "description": "The user's name."
          },
          {
            "name": "uid",
            "type": "TEXT NOT NULL",
            "description": "The user's unique identifier."
          },
          {
            "name": "section",
            "type": "TEXT",
            "description": "The user's academic section (nullable)."
          },
          {
            "name": "program",
            "type": "TEXT",
            "description": "The user's academic program (nullable)."
          },
          {
            "name": "contact",
            "type": "TEXT",
            "description": "The user's contact information (nullable)."
          },
          {
            "name": "cGPA",
            "type": "TEXT",
            "description": "The user's current cGPA (nullable)."
          },
          {
            "name": "email",
            "type": "TEXT",
            "description": "The user's email address (nullable)."
          },
          {
            "name": "pfpImage",
            "type": "BLOB",
            "description": "The user's profile picture as a binary large object (nullable)."
          }
        ]
      },
      "indexes": [
        {
          "name": "USERNAME ON LoopLinkUser(name)",
          "description": "An index on the `name` column for faster lookups."
        }
      ],
      "queries": [
        {
          "name": "insert",
          "description": "Inserts a new user with `name` and `uid`.",
          "sql": "INSERT INTO LoopLinkUser (name, uid) VALUES (?, ?);"
        },
        {
          "name": "insertAll",
          "description": "Inserts comprehensive user data including all nullable fields.",
          "sql": "INSERT INTO LoopLinkUser (name, uid, section, program, contact, cGPA, email, pfpImage) VALUES (?, ?, ?, ? , ?, ?, ?, ?);"
        },
        {
          "name": "getPFP",
          "description": "Retrieves the profile picture (`pfpImage`) of the first user found.",
          "sql": "SELECT pfpImage FROM LoopLinkUser LIMIT 1;"
        },
        {
          "name": "selectAll",
          "description": "Retrieves all columns for all users from the `LoopLinkUser` table.",
          "sql": "SELECT LoopLinkUser.* FROM LoopLinkUser;"
        },
        {
          "name": "delete",
          "description": "Deletes all records from the `LoopLinkUser` table.",
          "sql": "DELETE FROM LoopLinkUser;"
        },
        {
          "name": "getSize",
          "description": "Returns the total number of records in the `LoopLinkUser` table.",
          "sql": "SELECT COUNT(*) FROM LoopLinkUser;"
        }
      ]
    },
    "build.gradle.kts": {
      "path": "D:/Work/College/Projects/Log Chat/LoopLink/LoopLink/composeApp/build.gradle.kts",
      "description": "This Gradle Kotlin script configures the `composeApp` module of the LoopLink multiplatform project. It applies various plugins, defines platform-specific and common dependencies, and configures Android and Compose Desktop build settings, including SQLDelight database generation and application packaging.",
      "plugins": [
        "kotlinMultiplatform",
        "androidApplication",
        "composeMultiplatform",
        "composeCompiler",
        "composeHotReload",
        "kotlinxSerialization",
        "sqldelight"
      ],
      "kotlinConfiguration": {
        "androidTarget": "Sets the JVM target to 11 for Android builds.",
        "jvm": "Configures the JVM target for desktop builds.",
        "sourceSets": {
          "androidMain": "Android-specific dependencies including Compose UI, AndroidX Activity, SQLDelight Android driver, Ktor Android client and CIO server, and JmDNS for service discovery.",
          "commonMain": "Common dependencies shared across all platforms, such as Compose UI, Material3, Kotlinx Coroutines, Kotlinx Datetime, Koin for DI, SQLDelight runtime and coroutines extensions, Ktor client and server core, WebSockets, Content Negotiation, Serialization, Logging, Selenium for web driving, and Jsoup for HTML parsing, and Voyager for navigation.",
          "jvmMain": "JVM-specific dependencies including Compose Desktop, Kotlinx Coroutines Swing, SQLDelight JVM driver, Ktor Netty and CIO server, Ktor client CIO, and JmDNS."
        }
      },
      "sqlDelightConfiguration": {
        "databases": {
          "name": "LLData",
          "packageName": "com.db",
          "generateAsync": false,
          "version": 1.0
        }
      },
      "androidConfiguration": {
        "namespace": "Sets the application's namespace.",
        "compileSdk": 36,
        "buildFeatures": {
          "buildConfig": true
        },
        "defaultConfig": {
          "applicationId": "Sets the application ID.",
          "minSdk": "Standard Android application property.",
          "targetSdk": "Standard Android application property.",
          "versionCode": "Standard Android application property.",
          "versionName": "Standard Android application property.",
          "ocrSpaceAPIKEY": "Reads the `ocrSpaceAPIKEY` from `local.properties` and exposes it as a `BuildConfig` field for secure API key management."
        },
        "packaging": {
          "resources": {
            "excludes": "Excludes specific files from resource packaging."
          }
        },
        "buildTypes": {
          "release": {
            "minifyEnabled": false
          }
        },
        "compileOptions": {
          "sourceCompatibility": "Java 11",
          "targetCompatibility": "Java 11"
        }
      },
      "dependencies": [
        "core-ktx: Kotlin extensions for AndroidX libraries.",
        "compose.uiTooling: Compose UI tooling for debug builds."
      ],
      "composeResources": {
        "publicResClass": true,
        "generateResClass": "auto"
      },
      "composeDesktopApplication": {
        "mainClass": "org.asv.looplink.MainKt",
        "nativeDistributions": {
          "targetFormats": [
            "Dmg",
            "Msi",
            "Deb"
          ],
          "packageName": "Sets package name.",
          "packageVersion": "Sets package version.",
          "windows": {
            "iconFile": "Specifies the application icon for Windows.",
            "includeAllModules": true
          }
        }
      },
      "repositories": [
        "google()",
        "mavenCentral()"
      ]
    },
    "libs.versions.toml": {
      "path": "D:/Work/College/Projects/Log Chat/LoopLink/LoopLink/gradle/libs.versions.toml",
      "description": "This TOML file manages the versions and declarations of dependencies and plugins used across the LoopLink project, leveraging Gradle's Version Catalogs feature. This centralizes dependency management, making it easier to maintain and update versions consistently.",
      "sections": {
        "versions": "Defines various version numbers for libraries and tools like agp, android-sdk versions, androidx libraries, compose, kotlin, koin, ktor, logback, sqlDelight, jmdns, selenium, jsoup, voyager.",
        "libraries": "Declares the actual library dependencies with their modules and versions, referencing the versions defined in the [versions] section. Includes various AndroidX, Kotlin, Koin, Ktor, SQLDelight, JmDNS, Selenium, Jsoup, and Voyager components.",
        "plugins": "Declares Gradle plugins used in the project, referencing their versions. Includes androidApplication, androidLibrary, compose, kotlin, kotlinxSerialization, sqldelight, and google-services plugins."
      }
    }
  }
}